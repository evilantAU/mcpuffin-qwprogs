#pragma target fte
void RandomRoleTester(entity e);
void FO_Sound(entity e, float chan, string samp, float vol, float atten);
void FO_SetModel(entity e, string fomdl);
entity mcp_GetEntByClassname(string c);
entity mcp_GetEntByClassnameAndOwner(string c, entity o);
void mcp_worldspawn ();
void mcp_PreCache();
string GetCprintString (entity e, float _menutype);
void mcp_PutClientInServer();
void mcp_PlayerPreThink(entity e);
void mcp_PlayerPostThink(entity e);
void mcp_PlayerDeathThink(entity e);
void mcp_ClientConnect(optional float csqcactive);
void mcp_ClientDisconnect();
void mcp_WeaponFrame (entity e);
void stuffsound(entity e, string path);
void stuffsoundteam(float team, string path, entity exclude);
void stuffsoundall(string path,  entity exclude);
void stufferror(entity e, string s);
void stuffnotice(entity e, string s);
void cprint(entity e, float type);
void mcp_TryJoinTeam(entity e, float team);
void mcp_SetTeam(entity e);
void mcp_Respawn(entity e);
void mcp_PreCache();
void mcp_TrySetRole(entity e, float r);
void mcp_SpawnPlayer(entity e);
float mcp_VisibleWeapon (entity e);
void mcp_UpdateHudAmmo(entity owner, float wpn);
void mcp_muzzleflash (entity e);
void mcp_ParticleExplosion(vector org);
void mcp_SetPlayerSpeed(entity e);
void mcp_ReloadWeapon(entity e, float wpn);
void mcp_ShootShaft (entity e);
void mcp_ShootNail(entity e);
float GetRoleCount(float r, float t);
float GetRoleMax(float r, float t);
void mcp_JoinTeam(entity e, float t, float isrand);
void mcp_ToggleTeamBalance(entity e);
void mcp_ImpulseCaptureMenuOption(entity e);
void mcp_ImpulseCaptureDeadOrAlive(entity e);
void mcp_ImpulseCaptureAlive(entity e);
void mcp_ImpulseCaptureAttackFinished(entity e);
void mcp_ChangeWeaponModel(entity e, float wpn, float preserveframe);
float mcp_GetQuickSlot (entity e);
void mcp_UnBecomeDrone(entity e);
float RNG (float x);
void mcp_SpawnAliasMaker(entity e);
void HarpoonToward(entity targ, entity inflictor, entity attacker);
void mcp_RadiusDamage (entity inflictor, entity attacker, float damage, entity ignore, float mcpdeath, float addstat);
void mcp_SetPlayerSkin(entity e);
void mcp_SpecialSkill(entity e);
void mcp_RegenCells (entity e);
void mcp_ClientKill(entity e);
void mcp_CreateCorpse (entity oldent);
void mcp_StartDeathSeq(entity e);
void mcp_DeathSound (entity e);
void mcp_SetNextRespawn (entity ent, float sui);
void mcp_KillSound(entity targ, entity attacker);
void mcp_UnassignPlayerDim(entity e);
void mcp_SpawnRocket(entity e);
void mcp_SpawnSticky(entity e);
void mcp_SpawnNail(entity e);
void mcp_SpawnLaserBolt(entity e);
void mcp_SpawnDroneBullet(entity e, float offset);
void mcp_ReloadNext(entity e);
void mcp_EndDeathSeq();
void mcp_Damage (entity targ, entity inflictor, entity attacker, float damage);
void mcp_SpawnFlame(entity e);
void mcp_ResetVisDimensions(entity e);
void mcp_ResetPlayer(entity e);
void mcp_SetupRole(entity e);
void mcp_Sound(entity e, float chan, string samp, float vol, float atten);
void mcp_SetModel(entity e, string fomdl, float dimension);
void mcp_AssignPlayerDim(entity e);
void mcp_ExecTeamConfig(entity e);
void mcp_ExecClassConfig(entity e);
void explode_capacitorgren();
void mcp_PrimeGrenade(entity e);
void mcp_ThrowGrenade(entity e);
void mcp_ShootFlamer(entity e);
string mcp_ModeString (float m, float abbrv);
void mcp_SpawnMCPGM();
void mcp_ChangeMatchState(float ms);
void mcp_DropCoins(entity e, float entirety);
float mcp_HasTeamSpawns();
float mcp_GetRandomSpecial(entity e);
void mcp_TrySetSpecial(entity e, float s);
void cprintAll(float type);
void mcp_CastModeVote(entity e, float choice);
void mcp_CastMapVote(entity e, float choice);
void mcp_HealFiend(entity e);
void mcp_ThrowMCPFlag (entity e);
void mcp_SetModeVoteWinner();
void mcp_SetMapVoteWinner();
void mcp_CreateHealNumber(float heal, entity targ, entity attacker);
void mcp_SetPlayerScore(entity e);
void mcp_SetupSacCappoints();
void mcp_ChangeMCPGoalState(float s, entity e);
void mcp_DiedWithMCPFlag (entity e);
void mcp_ForceVote();
void mcp_DropLootHealth(entity e);
void mcp_DropLootArmour(entity e);
void mcp_DropLootGrenade(entity e);
void mcp_ChangeMode(entity e, float m);
void mcp_ModifyTeamScore(float t, float amnt);
void mcp_ControlPointCaptured(float cp, float byteam);
float mcp_isMap5cpViable();
void mcp_SetupControlPoints();
void mcp_AssignFFATeam(entity e);
float mcp_GetTeamPlacement(float victor);

void mcpgmthink_votemode();
void mcpgmthink_live_coinsteam();
void mcpgmthink_live_coinsffa();
void mcpgmthink_live_sac();
void mcpgmthink_live_fiend();
void mcpgmthink_live_baby();
void mcpgmthink_live_5cp();

float () crandom;
void (float damage) spawn_touchblood;
void (vector org, float damage) SpawnBlood;
void (vector org, vector dir) launch_spike;
void () superspike_touch ;
void () bubble_bob;
float () DoorShouldOpen;
float (entity targ) visible;
void () SUB_CalcAngleMoveDone;
void () SUB_CalcMoveDone;
void () SUB_UseTargets;

//anim
void mcpplayer_axe1();
void mcpplayer_axeb1();
void mcpplayer_axec1();
void mcpplayer_axed1();
void mcpplayer_shot1();
void mcpplayer_nail1();
void mcpplayer_flamer1();
void mcpplayer_rocket1();
void mcpplayer_light1();
void mcpplayer_unlimlight1();
void mcpplayer_minigunup();
void mcpplayer_pain1();
void mcpplayer_axpain1();
void mcpdrone_attack1();
void mcpplayer_die_ax1();
void mcpplayer_diea1()
void mcpplayer_dieb1()
void mcpplayer_diec1();
void mcpplayer_died1();
void mcpplayer_diee1()

void mcpfiend_attl1();
void mcpfiend_attr1();
void mcpfiend_die1();